plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Scale-free networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "B", cex=1.1, bty="n")
# Small world networks
g <- watts.strogatz.game(1, 100, 4, p = 0.02, loops = FALSE, multiple = FALSE)
V(g)$color <- "black"
V(g)$frame.color <- "black"
plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Small-world networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "C", cex=1.1, bty="n")
# Degree distribution
#Random
aa <- list()
for (i in 1:1000) {
g <- erdos.renyi.game(1000, 0.1, type = "gnp")
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
axis(2,at=c(1e-3,1e-2, 1e-1, 1e-0),labels=c(1e-3,1e-2, 1e-1, 1e-0))
legend("topright", "D", cex=1.1, bty="n")
for (i in 1:10000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext("P(k)", side = 2, line = 3, cex = 1.1)
#Scale - Free
aa <- list()
for (i in 1:1000) {
g <- sample_pa(1000, power = 1, m = 1, out.dist = NULL, out.seq = NULL,out.pref = FALSE, zero.appeal = 1, directed = FALSE,algorithm ="psumtree", start.graph = NULL)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
legend("topright", "E", cex=1.1, bty="n")
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext(paste("Degree ","k"), side = 1, line = 3, cex = 1.1)
# Small world
aa <- list()
for (i in 1:1000) {
g <- watts.strogatz.game(1, 1000, 4, p = 0.02, loops = FALSE, multiple = FALSE)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
legend("topright", "F", cex=1.1, bty="n")
mu <- 1e-4
seq <- seqoverall[which(seqoverall$type=="random"),]
#Random network
plot(MeanRand[which(seq$mu==mu)], ylim = c(0, 2000), xaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n", type = "n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0.1,1,0.1))
arrows(seq(1,10,1),LowerRand[which(seq$mu==mu)],seq(1,10,1),UpperRand[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanRand[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(p)), side = 1, line = 2.8, cex = 1.1)
mtext(expression(paste("Effective population size  ", italic(paste(N[e])))), side = 2, line = 2.8, cex = 0.9)
legend("topright", "G", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="scalefree"),]
#Scale free network
plot(MeanScale[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0,1.5,length.out = 10))
arrows(seq(1,10,1),LowerScale[which(seq$mu==mu)],seq(1,10,1),UpperScale[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanScale[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(pi)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "H", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="smallworld"),]
#Small world network
plot(MeanSmall[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(1,10,1))
arrows(seq(1,10,1),LowerSmall[which(seq$mu==mu)],seq(1,10,1),UpperSmall[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanSmall[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(K)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "I", cex=1.1, bty="n")
# Effective population size analysis script
# Social network structure
library(igraph)
seq<-expand.grid(N=1000, tmax=300,Nsim = 1000, mu = c(1e-1,1e-2,1e-3,1e-4),p = seq(0.1,1,0.1),pi = seq(0,1.5,length.out = 10), K = seq(1,10,1),
type = c("random","scalefree","smallworld"))
seq <- seq[c(which(seq$type == "random"     & seq$pi == 0  & seq$K ==1),
which(seq$type == "scalefree"  & seq$p == 0.1 & seq$K ==1),
which(seq$type == "smallworld" & seq$pi == 0  & seq$p ==0.1)) ,]
graphics.off()
png("NetworksNe.png", res = 900, height = 22, width = 20, units = "cm")
par(mfrow=c(3,3),
oma=c(2,2.6,1,0.5),
mar=c(3,2,1.75,0.75))
#Random network
p <- 0.1
g <- erdos.renyi.game(100, p, type = "gnp")
V(g)$color <- "black"
V(g)$frame.color <-"black"
plot(g, vertex.label= NA, edge.arrow.size=0.1,vertex.size = 5)
mtext("Random networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "A", cex=1.1, bty="n")
# Scale free networks
g <- sample_pa(100, power = 1, m = 1, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = FALSE,
algorithm ="psumtree", start.graph = NULL)
V(g)$color <- "black"
V(g)$frame.color <- "black"
plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Scale-free networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "B", cex=1.1, bty="n")
# Small world networks
g <- watts.strogatz.game(1, 100, 4, p = 0.02, loops = FALSE, multiple = FALSE)
V(g)$color <- "black"
V(g)$frame.color <- "black"
plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Small-world networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "C", cex=1.1, bty="n")
# Degree distribution
#Random
aa <- list()
for (i in 1:1000) {
g <- erdos.renyi.game(1000, 0.1, type = "gnp")
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
axis(2,at=c(1e-3,1e-2, 1e-1, 1e-0),labels=c(1e-3,1e-2, 1e-1, 1e-0))
legend("topright", "D", cex=1.1, bty="n")
for (i in 1:10000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext("P(k)", side = 2, line = 3, cex = 1.1)
#Scale - Free
aa <- list()
for (i in 1:1000) {
g <- sample_pa(1000, power = 1, m = 1, out.dist = NULL, out.seq = NULL,out.pref = FALSE, zero.appeal = 1, directed = FALSE,algorithm ="psumtree", start.graph = NULL)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
legend("topright", "E", cex=1.1, bty="n")
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext(paste("Degree ","k"), side = 1, line = 3, cex = 1.1)
# Small world
aa <- list()
for (i in 1:1000) {
g <- watts.strogatz.game(1, 1000, 4, p = 0.02, loops = FALSE, multiple = FALSE)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
legend("topright", "F", cex=1.1, bty="n")
mu <- 1e-4
seq <- seqoverall[which(seqoverall$type=="random"),]
#Random network
plot(MeanRand[which(seq$mu==mu)], ylim = c(0, 2000), xaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n", type = "n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0.1,1,0.1))
arrows(seq(1,10,1),LowerRand[which(seq$mu==mu)],seq(1,10,1),UpperRand[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanRand[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(p)), side = 1, line = 2.8, cex = 1.1)
mtext(expression(paste("Effective population size  ", italic(paste(N[e])))), side = 2, line = 2.8, cex = 0.9)
legend("topright", "G", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="scalefree"),]
#Scale free network
plot(MeanScale[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0,1.5,length.out = 10))
arrows(seq(1,10,1),LowerScale[which(seq$mu==mu)],seq(1,10,1),UpperScale[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanScale[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(pi)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "H", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="smallworld"),]
#Small world network
plot(MeanSmall[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(1,10,1))
arrows(seq(1,10,1),LowerSmall[which(seq$mu==mu)],seq(1,10,1),UpperSmall[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanSmall[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(K)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "I", cex=1.1, bty="n")
dev.off()
library(igraph)
seq<-expand.grid(N=1000, tmax=300,Nsim = 1000, mu = c(1e-1,1e-2,1e-3,1e-4),p = seq(0.1,1,0.1),pi = seq(0,1.5,length.out = 10), K = seq(1,10,1),
type = c("random","scalefree","smallworld"))
seq <- seq[c(which(seq$type == "random"     & seq$pi == 0  & seq$K ==1),
which(seq$type == "scalefree"  & seq$p == 0.1 & seq$K ==1),
which(seq$type == "smallworld" & seq$pi == 0  & seq$p ==0.1)) ,]
graphics.off()
png("NetworksNe.png", res = 900, height = 18, width = 18, units = "cm")
par(mfrow=c(3,3),
oma=c(2,2.6,1,0.5),
mar=c(3,2,1.75,0.75))
#Random network
p <- 0.1
g <- erdos.renyi.game(100, p, type = "gnp")
V(g)$color <- "black"
V(g)$frame.color <-"black"
plot(g, vertex.label= NA, edge.arrow.size=0.1,vertex.size = 5)
mtext("Random networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "A", cex=1.1, bty="n")
# Scale free networks
g <- sample_pa(100, power = 1, m = 1, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = FALSE,
algorithm ="psumtree", start.graph = NULL)
V(g)$color <- "black"
V(g)$frame.color <- "black"
plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Scale-free networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "B", cex=1.1, bty="n")
# Small world networks
g <- watts.strogatz.game(1, 100, 4, p = 0.02, loops = FALSE, multiple = FALSE)
V(g)$color <- "black"
V(g)$frame.color <- "black"
plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Small-world networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "C", cex=1.1, bty="n")
# Degree distribution
#Random
aa <- list()
for (i in 1:1000) {
g <- erdos.renyi.game(1000, 0.1, type = "gnp")
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
axis(2,at=c(1e-3,1e-2, 1e-1, 1e-0),labels=c(1e-3,1e-2, 1e-1, 1e-0))
legend("topright", "D", cex=1.1, bty="n")
for (i in 1:10000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext("P(k)", side = 2, line = 3, cex = 1.1)
#Scale - Free
aa <- list()
for (i in 1:1000) {
g <- sample_pa(1000, power = 1, m = 1, out.dist = NULL, out.seq = NULL,out.pref = FALSE, zero.appeal = 1, directed = FALSE,algorithm ="psumtree", start.graph = NULL)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
legend("topright", "E", cex=1.1, bty="n")
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext(paste("Degree ","k"), side = 1, line = 3, cex = 1.1)
# Small world
aa <- list()
for (i in 1:1000) {
g <- watts.strogatz.game(1, 1000, 4, p = 0.02, loops = FALSE, multiple = FALSE)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
legend("topright", "F", cex=1.1, bty="n")
mu <- 1e-4
seq <- seqoverall[which(seqoverall$type=="random"),]
#Random network
plot(MeanRand[which(seq$mu==mu)], ylim = c(0, 2000), xaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n", type = "n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0.1,1,0.1))
arrows(seq(1,10,1),LowerRand[which(seq$mu==mu)],seq(1,10,1),UpperRand[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanRand[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(p)), side = 1, line = 2.8, cex = 1.1)
mtext(expression(paste("Effective population size  ", italic(paste(N[e])))), side = 2, line = 2.8, cex = 0.9)
legend("topright", "G", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="scalefree"),]
#Scale free network
plot(MeanScale[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0,1.5,length.out = 10))
arrows(seq(1,10,1),LowerScale[which(seq$mu==mu)],seq(1,10,1),UpperScale[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanScale[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(pi)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "H", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="smallworld"),]
#Small world network
plot(MeanSmall[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(1,10,1))
arrows(seq(1,10,1),LowerSmall[which(seq$mu==mu)],seq(1,10,1),UpperSmall[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanSmall[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(K)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "I", cex=1.1, bty="n")
dev.off()
# Effective population size analysis script
# Social network structure
library(igraph)
seq<-expand.grid(N=1000, tmax=300,Nsim = 1000, mu = c(1e-1,1e-2,1e-3,1e-4),p = seq(0.1,1,0.1),pi = seq(0,1.5,length.out = 10), K = seq(1,10,1),
type = c("random","scalefree","smallworld"))
seq <- seq[c(which(seq$type == "random"     & seq$pi == 0  & seq$K ==1),
which(seq$type == "scalefree"  & seq$p == 0.1 & seq$K ==1),
which(seq$type == "smallworld" & seq$pi == 0  & seq$p ==0.1)) ,]
graphics.off()
png("NetworksNe.png", res = 900, height = 18, width = 16, units = "cm")
par(mfrow=c(3,3),
oma=c(2,2.6,1,0.5),
mar=c(3,2,1.75,0.75))
#Random network
p <- 0.1
g <- erdos.renyi.game(100, p, type = "gnp")
V(g)$color <- "black"
V(g)$frame.color <-"black"
plot(g, vertex.label= NA, edge.arrow.size=0.1,vertex.size = 5)
mtext("Random networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "A", cex=1.1, bty="n")
# Scale free networks
g <- sample_pa(100, power = 1, m = 1, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = FALSE,
algorithm ="psumtree", start.graph = NULL)
V(g)$color <- "black"
V(g)$frame.color <- "black"
plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Scale-free networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "B", cex=1.1, bty="n")
# Small world networks
g <- watts.strogatz.game(1, 100, 4, p = 0.02, loops = FALSE, multiple = FALSE)
V(g)$color <- "black"
V(g)$frame.color <- "black"
plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Small-world networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "C", cex=1.1, bty="n")
# Degree distribution
#Random
aa <- list()
for (i in 1:1000) {
g <- erdos.renyi.game(1000, 0.1, type = "gnp")
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
axis(2,at=c(1e-3,1e-2, 1e-1, 1e-0),labels=c(1e-3,1e-2, 1e-1, 1e-0))
legend("topright", "D", cex=1.1, bty="n")
for (i in 1:10000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext("P(k)", side = 2, line = 3, cex = 1.1)
#Scale - Free
aa <- list()
for (i in 1:1000) {
g <- sample_pa(1000, power = 1, m = 1, out.dist = NULL, out.seq = NULL,out.pref = FALSE, zero.appeal = 1, directed = FALSE,algorithm ="psumtree", start.graph = NULL)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
legend("topright", "E", cex=1.1, bty="n")
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext(paste("Degree ","k"), side = 1, line = 3, cex = 1.1)
# Small world
aa <- list()
for (i in 1:1000) {
g <- watts.strogatz.game(1, 1000, 4, p = 0.02, loops = FALSE, multiple = FALSE)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
legend("topright", "F", cex=1.1, bty="n")
mu <- 1e-4
seq <- seqoverall[which(seqoverall$type=="random"),]
#Random network
plot(MeanRand[which(seq$mu==mu)], ylim = c(0, 2000), xaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n", type = "n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0.1,1,0.1))
arrows(seq(1,10,1),LowerRand[which(seq$mu==mu)],seq(1,10,1),UpperRand[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanRand[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(p)), side = 1, line = 2.8, cex = 1.1)
mtext(expression(paste("Effective population size  ", italic(paste(N[e])))), side = 2, line = 2.8, cex = 0.9)
legend("topright", "G", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="scalefree"),]
#Scale free network
plot(MeanScale[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0,1.5,length.out = 10))
arrows(seq(1,10,1),LowerScale[which(seq$mu==mu)],seq(1,10,1),UpperScale[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanScale[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(pi)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "H", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="smallworld"),]
#Small world network
plot(MeanSmall[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(1,10,1))
arrows(seq(1,10,1),LowerSmall[which(seq$mu==mu)],seq(1,10,1),UpperSmall[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanSmall[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(K)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "I", cex=1.1, bty="n")
dev.off()
graphics.off()
png("NetworksNe.png", res = 900, height = 18, width = 18, units = "cm")
par(mfrow=c(3,3),
oma=c(2,2.6,1,0.5),
mar=c(3,2,1.75,0.75))
#Random network
p <- 0.1
g <- erdos.renyi.game(100, p, type = "gnp")
V(g)$color <- "black"
V(g)$frame.color <-"black"
plot(g, vertex.label= NA, edge.arrow.size=0.1,vertex.size = 5)
mtext("Random networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "A", cex=1.1, bty="n")
# Scale free networks
g <- sample_pa(100, power = 1, m = 1, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = FALSE,
algorithm ="psumtree", start.graph = NULL)
V(g)$color <- "black"
V(g)$frame.color <- "black"
plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Scale-free networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "B", cex=1.1, bty="n")
# Small world networks
g <- watts.strogatz.game(1, 100, 4, p = 0.02, loops = FALSE, multiple = FALSE)
V(g)$color <- "black"
V(g)$frame.color <- "black"
plot(g, vertex.label= NA, edge.arrow.size=0.5,vertex.size = 5)
mtext("Small-world networks", side = 3, line = 0.5, cex = 1.1)
legend("topright", "C", cex=1.1, bty="n")
# Degree distribution
#Random
aa <- list()
for (i in 1:1000) {
g <- erdos.renyi.game(1000, 0.1, type = "gnp")
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
axis(2,at=c(1e-3,1e-2, 1e-1, 1e-0),labels=c(1e-3,1e-2, 1e-1, 1e-0))
legend("topright", "D", cex=1.1, bty="n")
for (i in 1:10000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext("P(k)", side = 2, line = 3, cex = 1.1)
#Scale - Free
aa <- list()
for (i in 1:1000) {
g <- sample_pa(1000, power = 1, m = 1, out.dist = NULL, out.seq = NULL,out.pref = FALSE, zero.appeal = 1, directed = FALSE,algorithm ="psumtree", start.graph = NULL)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
legend("topright", "E", cex=1.1, bty="n")
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
mtext(paste("Degree ","k"), side = 1, line = 3, cex = 1.1)
# Small world
aa <- list()
for (i in 1:1000) {
g <- watts.strogatz.game(1, 1000, 4, p = 0.02, loops = FALSE, multiple = FALSE)
aa[[i]] <- degree.distribution(g)
}
plot("", xlab = "", ylab = "", log = "xy", type = "n", xlim = c(1e-0,1e3), ylim = c(1e-3,1e-0), bty = "n", xaxt = "n", yaxt ="n")
axis(1,at=c(1,10,100,1000),labels=c(1,10,100,1000))
for (i in 1:1000) {
lines(aa[[i]], log = "xy", col= "grey", pch = 16, lwd=1.3)
}
legend("topright", "F", cex=1.1, bty="n")
mu <- 1e-4
seq <- seqoverall[which(seqoverall$type=="random"),]
#Random network
plot(MeanRand[which(seq$mu==mu)], ylim = c(0, 2000), xaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n", type = "n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0.1,1,0.1))
arrows(seq(1,10,1),LowerRand[which(seq$mu==mu)],seq(1,10,1),UpperRand[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanRand[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(p)), side = 1, line = 2.8, cex = 1.1)
mtext(expression(paste("Effective population size  ", italic(paste(N[e])))), side = 2, line = 2.8, cex = 0.9)
legend("topright", "G", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="scalefree"),]
#Scale free network
plot(MeanScale[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(0,1.5,length.out = 10))
arrows(seq(1,10,1),LowerScale[which(seq$mu==mu)],seq(1,10,1),UpperScale[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanScale[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(pi)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "H", cex=1.1, bty="n")
seq <- seqoverall[which(seqoverall$type=="smallworld"),]
#Small world network
plot(MeanSmall[which(seq$mu==mu)], ylim = c(0, 2000), type = "n", xaxt = "n", yaxt = "n", ylab = "", pch=18, cex=1.3, xlab = "", main = "", bty="n")
par(xpd=FALSE)
abline(h = 1000, lty = 2)
axis(1,at=seq(1,10,1),labels=seq(1,10,1))
arrows(seq(1,10,1),LowerSmall[which(seq$mu==mu)],seq(1,10,1),UpperSmall[which(seq$mu==mu)], code=3, lwd=2,col="grey", cex=1.3, length=0, angle = 90)
points(MeanSmall[which(seq$mu==mu)], pch=18, cex=2, col="black")
mtext(expression(italic(K)), side = 1, line = 2.8, cex = 1.1)
legend("topright", "I", cex=1.1, bty="n")
dev.off()
