N_pop <- 8
t_max <- 100
p0 <- 0.5
require(RColorBrewer)#load package
col.pal <- brewer.pal(N_pop, "Dark1") #create a pallette which you loop over for corresponding values
# graphics.off()
# png("Drift.png", width = 15,height = 15, units = "cm", res = 1200)
par(mfrow= c(2,2),
mar=c(1.4,2,2.2,0.4),
oma=c(2,2.2,0,0))
N<- 10
p <- matrix(0, N_pop, t_max)
for (i in 1:N_pop) {
Pop <- c(rep(1, p0*N), rep(0, (1-p0)*N))
for (t in 1:t_max) {
p[i,t] <- sum(Pop)/length(Pop)
Pop <- sample(Pop, replace = TRUE)
}
}
plot(p[1,], type = "n", ylim = c(0,1), ylab = "")
for (i in 1:N_pop) {
lines(p[i,], col = col.pal[i], lwd=2)
}
mtext(side = 3, expression(paste(italic("N")," = ",10)))
N<- 100
p <- matrix(0, N_pop, t_max)
for (i in 1:N_pop) {
Pop <- c(rep(1, p0*N), rep(0, (1-p0)*N))
for (t in 1:t_max) {
p[i,t] <- sum(Pop)/length(Pop)
Pop <- sample(Pop, replace = TRUE)
}
}
plot(p[1,], type = "n", ylim = c(0,1), ylab = "")
for (i in 1:N_pop) {
lines(p[i,], col = col.pal[i], lwd=2)
}
mtext(side = 3, expression(paste(italic("N")," = ",100)))
N<- 1000
p <- matrix(0, N_pop, t_max)
for (i in 1:N_pop) {
Pop <- c(rep(1, p0*N), rep(0, (1-p0)*N))
for (t in 1:t_max) {
p[i,t] <- sum(Pop)/length(Pop)
Pop <- sample(Pop, replace = TRUE)
}
}
plot(p[1,], type = "n", ylim = c(0,1), ylab = "")
for (i in 1:N_pop) {
lines(p[i,], col = col.pal[i], lwd=2)
}
mtext(side = 3, expression(paste(italic("N")," = ",1000)))
N<- 10000
p <- matrix(0, N_pop, t_max)
for (i in 1:N_pop) {
Pop <- c(rep(1, p0*N), rep(0, (1-p0)*N))
for (t in 1:t_max) {
p[i,t] <- sum(Pop)/length(Pop)
Pop <- sample(Pop, replace = TRUE)
}
}
plot(p[1,], type = "n", ylim = c(0,1), ylab = "")
for (i in 1:N_pop) {
lines(p[i,], col = col.pal[i], lwd=2)
}
mtext(side = 3, expression(paste(italic("N")," = ",10000)))
mtext(side = 1, line = 1 , "Generation", outer = TRUE, cex = 1)
mtext(side = 2, line = 1 , "Allele frequency", outer = TRUE, cex = 1)
#dev.off()
N_pop <- 8
t_max <- 100
p0 <- 0.5
library(scales)
#color stuff
require(RColorBrewer)#load package
col.pal <- brewer.pal(8, "Dark2") #create a pallette which you loop over for corresponding values
seqoverall <- seq
require(RColorBrewer)#load package
col.pal <- brewer.pal(N_pop, "Dark1") #create a pallette which you loop over for corresponding values
# graphics.off()
# png("Drift.png", width = 15,height = 15, units = "cm", res = 1200)
par(mfrow= c(2,2),
mar=c(1.4,2,2.2,0.4),
oma=c(2,2.2,0,0))
N<- 10
p <- matrix(0, N_pop, t_max)
for (i in 1:N_pop) {
Pop <- c(rep(1, p0*N), rep(0, (1-p0)*N))
for (t in 1:t_max) {
p[i,t] <- sum(Pop)/length(Pop)
Pop <- sample(Pop, replace = TRUE)
}
}
plot(p[1,], type = "n", ylim = c(0,1), ylab = "")
for (i in 1:N_pop) {
lines(p[i,], col = col.pal[i], lwd=2)
}
mtext(side = 3, expression(paste(italic("N")," = ",10)))
N<- 100
p <- matrix(0, N_pop, t_max)
for (i in 1:N_pop) {
Pop <- c(rep(1, p0*N), rep(0, (1-p0)*N))
for (t in 1:t_max) {
p[i,t] <- sum(Pop)/length(Pop)
Pop <- sample(Pop, replace = TRUE)
}
}
plot(p[1,], type = "n", ylim = c(0,1), ylab = "")
for (i in 1:N_pop) {
lines(p[i,], col = col.pal[i], lwd=2)
}
mtext(side = 3, expression(paste(italic("N")," = ",100)))
N<- 1000
p <- matrix(0, N_pop, t_max)
for (i in 1:N_pop) {
Pop <- c(rep(1, p0*N), rep(0, (1-p0)*N))
for (t in 1:t_max) {
p[i,t] <- sum(Pop)/length(Pop)
Pop <- sample(Pop, replace = TRUE)
}
}
plot(p[1,], type = "n", ylim = c(0,1), ylab = "")
for (i in 1:N_pop) {
lines(p[i,], col = col.pal[i], lwd=2)
}
mtext(side = 3, expression(paste(italic("N")," = ",1000)))
N<- 10000
p <- matrix(0, N_pop, t_max)
for (i in 1:N_pop) {
Pop <- c(rep(1, p0*N), rep(0, (1-p0)*N))
for (t in 1:t_max) {
p[i,t] <- sum(Pop)/length(Pop)
Pop <- sample(Pop, replace = TRUE)
}
}
plot(p[1,], type = "n", ylim = c(0,1), ylab = "")
for (i in 1:N_pop) {
lines(p[i,], col = col.pal[i], lwd=2)
}
mtext(side = 3, expression(paste(italic("N")," = ",10000)))
mtext(side = 1, line = 1 , "Generation", outer = TRUE, cex = 1)
mtext(side = 2, line = 1 , "Allele frequency", outer = TRUE, cex = 1)
#dev.off()
seq<-expand.grid(N=1000, tmax=300,Nsim = 1000, mu = c(1e-4,1e-3,1e-2,1e-1), m = seq(0,0.9,0.1), e = seq(0,0.9,0.1) )
seq <- seq[-which(seq$m > 0 & seq$e !=0), ]
####
###
##
# Plotting code for Fig. 5
##
###
####
# Requires simulation results from "SimNetworks.R"
library(igraph)
seq<-expand.grid(N=1000, tmax=300,Nsim = 100, mu = c(1e-1,1e-2,1e-3,1e-4),p = seq(0.1,1,0.1),pi = seq(0,1.5,length.out = 10), K = seq(1,10,1),
type = c("random","scalefree","smallworld"))
seq <- seq[c(which(seq$type == "random"     & seq$pi == 0  & seq$K ==1),
which(seq$type == "scalefree"  & seq$p == 0.1 & seq$K ==1),
which(seq$type == "smallworld" & seq$pi == 0  & seq$p ==0.1)) ,]
Mean <- matrix(NA, nrow = nrow(seq), ncol = seq$tmax[1])
Upper <- matrix(NA, nrow = nrow(seq), ncol = seq$tmax[1])
Lower <- matrix(NA, nrow = nrow(seq), ncol = seq$tmax[1])
Mean_Traits <- matrix(NA, nrow = nrow(seq), ncol = seq$tmax[1])
Mean_Simp <- matrix(NA, nrow = nrow(seq), ncol = seq$tmax[1])
